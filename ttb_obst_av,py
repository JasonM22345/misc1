import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile, QoSReliabilityPolicy

from sensor_msgs.msg import Imu, Range, LaserScan
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry

import random
import numpy as np
import time


class TTBGoalController(Node):

    def __init__(self):
        super().__init__('ttb_ir')

        # Publisher for Twist messages
        self.publisher_ = self.create_publisher(
            Twist,
            '/TTB02/cmd_vel',
            10
        )

        # Subscribers
        qos_profile = QoSProfile(depth=10, reliability=QoSReliabilityPolicy.BEST_EFFORT)
        self.subscriber_odom = self.create_subscription(
            Odometry,
            '/TTB02/odom',
            self.odom_callback,
            qos_profile
        )
        self.subscriber_scan = self.create_subscription(
            LaserScan,
            '/TTB02/scan',
            self.scan_callback,
            qos_profile
        )

        # Timer for periodic control updates
        timer_period = 0.01
        self.timer = self.create_timer(timer_period, self.controller_callback)

        # Movement control variables
        self.lin_x = 0.0
        self.ang_z = 0.0
        self.prev_time = time.time()
        self.initial_x = 0.0
        self.initial_y = 0.0
        self.goal_x = 0.0
        self.goal_y = 0.0
        self.first_pos = True
        self.kv = 0.2
        self.kp = 0.5
        self.desired_theta = 0

        # Obstacle avoidance variables
        self.current_x = 0.0
        self.current_y = 0.0
        self.yaw_z = 0.0
        self.closest_obstacle_distance = float("inf")
        self.closest_obstacle_angle = 0.0
        self.safe_distance = 0.30

    def controller_callback(self):
        msg = Twist()
        
        # Check if an obstacle is too close
        if self.closest_obstacle_distance < self.safe_distance:
            # Avoid obstacle
            msg.linear.x = 0.0  # Stop forward motion
            msg.angular.z = 1.0  # Rotate to avoid obstacle
        else:
            # Proceed towards the goal
            msg.linear.x = self.lin_x
            msg.angular.z = self.ang_z

        self.publisher_.publish(msg)

    def odom_callback(self, msg):
        if self.first_pos:
            self.initial_x = msg.pose.pose.position.x
            self.initial_y = msg.pose.pose.position.y
            self.goal_x = self.initial_x + 1.5
            self.goal_y = self.initial_y + 1.5
            self.first_pos = False

        # Update current position
        self.current_x = msg.pose.pose.position.x
        self.current_y = msg.pose.pose.position.y

        dx = self.goal_x - self.current_x
        dy = self.goal_y - self.current_y

        self.lin_x = self.kv * np.sqrt(dx**2 + dy**2)
        self.desired_theta = np.arctan2(dy, dx)

        # Update yaw from quaternion
        q_x = msg.pose.pose.orientation.x
        q_y = msg.pose.pose.orientation.y
        q_z = msg.pose.pose.orientation.z
        q_w = msg.pose.pose.orientation.w
        t3 = 2.0 * (q_w * q_z + q_x * q_y)
        t4 = 1.0 - 2.0 * (q_y**2 + q_z**2)
        self.yaw_z = np.arctan2(t3, t4)

        self.ang_z = self.kp * (self.desired_theta - self.yaw_z)

    def scan_callback(self, msg):
        # Process lidar data to find the closest obstacle
        ranges = msg.ranges
        closest_distance = float("inf")
        closest_angle = 0.0

        for i, distance in enumerate(ranges):
            angle = msg.angle_min + i * msg.angle_increment
            if distance < closest_distance:
                closest_distance = distance
                closest_angle = angle

        self.closest_obstacle_distance = closest_distance
        self.closest_obstacle_angle = closest_angle


def main(args=None):
    rclpy.init(args=args)
    ttb_controller = TTBGoalController()
    rclpy.spin(ttb_controller)
    ttb_controller.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
